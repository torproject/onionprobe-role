---
#
# Onionprobe configuration file
#
# Copyright (C) 2024 The Tor Project, Inc.
# SPDX-License-Identifier: GPL-3.0-or-later
#

- name: configuration | onionprobe | Handle Onionprobe config path
  when: onionprobe_config_path | length == 0
  block:
    - name: configuration | onionprobe | Set onionprobe_config_path for the distro installation method
      when: onionprobe_installation == 'distro'
      ansible.builtin.set_fact:
        onionprobe_config_path: /etc/onionprobe

    - name: configuration | onionprobe | Set onionprobe_config_path for the pip installation method
      when: onionprobe_installation == 'pip'
      ansible.builtin.set_fact:
        onionprobe_config_path: "{{ onionprobe_virtualenv }}/share/onionprobe/configs"

    - name: configuration | onionprobe | Set onionprobe_config_path for the repository installation method
      when: onionprobe_installation == 'repository'
      ansible.builtin.set_fact:
        onionprobe_config_path: "{{ onionprobe_path }}/configs"

    - name: configuration | onionprobe | Manage the configuration path
      ansible.builtin.file:
        path: "{{ onionprobe_config_path }}"
        state: directory
        mode: '0755'

- name: configuration | onionprobe | Handle Onionprobe config script path
  when: onionprobe_config_script_path | length == 0
  block:
    - name: configuration | onionprobe | Set onionprobe_config_script_path for the distro installation method
      when: onionprobe_installation == 'distro'
      ansible.builtin.set_fact:
        onionprobe_config_script_path: /usr/onionprobe/examples

    - name: configuration | onionprobe | Set onionprobe_config_script_path for the pip installation method
      when: onionprobe_installation == 'pip'
      ansible.builtin.set_fact:
        onionprobe_config_script_path: "{{ onionprobe_virtualenv }}/share/onionprobe/examples"

    - name: configuration | onionprobe | Set onionprobe_config_script_path for the repository installation method
      when: onionprobe_installation == 'repository'
      ansible.builtin.set_fact:
        onionprobe_config_script_path: "{{ onionprobe_path }}/packages"

- name: configuration | onionprobe | Manage the config generation script
  when: onionprobe_config_script_src | length != 0
  block:
    - name: configuration | onionprobe | Manage the config generation script path
      ansible.builtin.file:
        path: "{{ onionprobe_config_script_path }}"
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: '0755'
        state: directory

    - name: configuration | onionprobe | Copy custom config generation script
      ansible.builtin.copy:
        src: "{{ onionprobe_config_script_src }}"
        dest: "{{ onionprobe_config_script_path }}"
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: '0755'
      # We could trigger script execution only when the config script changed
      #register: onionprobe_config_script_copy

    #- name: configuration | onionprobe | Checks if configuration already exists
    #  ansible.builtin.stat:
    #    path: "{{ onionprobe_config_path }}/{{ onionprobe_config }}"
    #  register: onionprobe_config_stat

    - name: configuration | onionprobe | Runs configuration script as root when not in standalone mode
      #when: onionprobe_config.script_copy.changed and onionprobe_operation != 'standalone' and owner == 'root'
      when: onionprobe_operation != 'standalone' and owner == 'root'
      ansible.builtin.command:
        cmd: "{{ onionprobe_config_script_path }}/{{ onionprobe_config_script_src | basename }} {{ onionprobe_config_script_params }}"
        chdir: "{{ onionprobe_config_path }}"
      # This needs a better change detection
      changed_when: true
      notify: Restart the Onionprobe service

    - name: configuration | onionprobe | Runs configuration script as the onionprobe user when not in standalone mode
      #when: onionprobe_config.script_copy.changed and onionprobe_operation != 'standalone' and owner != 'root'
      when: onionprobe_operation != 'standalone' and owner != 'root'
      ansible.builtin.command:
        cmd: "{{ onionprobe_config_script_path }}/{{ onionprobe_config_script_src | basename }} {{ onionprobe_config_script_params }}"
        chdir: "{{ onionprobe_config_path }}"
        become: true
        become_user: "{{ owner }}"
      # This needs a better change detection
      changed_when: true
      notify: Restart the Onionprobe service

- name: configuration | onionprobe | Manages Onionprobe configuration file
  block:
    - name: configuration | onionprobe | Copy configuration script file
      when: onionprobe_config_src | length != 0
      ansible.builtin.copy:
        src: "{{ onionprobe_config_src }}"
        dest: "{{ onionprobe_config_path }}/{{ onionprobe_config }}"
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: '0755'
      notify: Restart the Onionprobe service
